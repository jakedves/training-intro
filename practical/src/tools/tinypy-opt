#!/usr/bin/env python3.10

import argparse
import ast
from io import IOBase
from xdsl.context import MLContext
from xdsl.dialects.builtin import ModuleOp
from tiny_py_to_standard import LowerTinyPyToStandard
from for_to_parallel import ConvertForToParallel
from tiny_py import tinyPyIR
from util.semantic_error import SemanticError
from typing import Callable, Dict, List
from xdsl.xdsl_opt_main import xDSLOptMain


class PsyOptMain(xDSLOptMain):

    def register_all_passes(self):
        super().register_all_passes()
        self.register_pass("tiny-py-to-standard", lambda: LowerTinyPyToStandard)
        self.register_pass("for-to-parallel", lambda: ConvertForToParallel)

    def register_all_targets(self):
        super().register_all_targets()

    def setup_pipeline(self):
        super().setup_pipeline()

    def register_all_dialects(self):
        super().register_all_dialects()
        """Register all dialects that can be used."""
        self.ctx.register_dialect("tiny_py", lambda: tinyPyIR)

    @staticmethod
    def get_passes_as_dict(
    ) -> Dict[str, Callable[[MLContext, ModuleOp], None]]:
        """Add all passes that can be called by psy-opt in a dictionary."""

        pass_dictionary = {}

        passes = PsyOptMain.passes_native

        for pass_function in passes:
            pass_dictionary[pass_function.__name__.replace(
                "_", "-")] = pass_function

        return pass_dictionary

    def get_passes_as_list(native=False, integrated=False) -> List[str]:
        """Add all passes that can be called by psy-opt in a dictionary."""

        pass_list = []

        passes = PsyOptMain.passes_native

        for pass_function in passes:
            pass_list.append(pass_function.__name__.replace("_", "-"))

        return pass_list

    def register_all_frontends(self):
        super().register_all_frontends()

def __main__():
    psy_main = PsyOptMain()

    try:
        psy_main.run()
    except SyntaxError as e:
        print(e.get_message())
        exit(0)
    except SemanticError as e:
        print("Semantic error: %s" % str(e))
        exit(0)


if __name__ == "__main__":
    __main__()
